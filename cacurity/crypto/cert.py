from OpenSSL import crypto

import time
import random

from cacurity.crypto.exceptions import NoStartLine


class Certificate(crypto.X509):

    def __init__(self, req=None, key=None, ca=False, age=3600, **subject):
        """Parameters to this will be used to fill in the subject of this
        certificate. They should be attribytes of an X509Name object.

        If `req` is provided, the subject and public key will be set from that
        X509Req/Request object.

        If `key` is provided, it will be used for the public key portion of the
        certificate.

        An exception is raised if neither req nor key are provided.

        Specific subject fields given here will override anything in a CSR that
        is also provided.
        """
        super(Certificate, self).__init__()

        if not (req or key):
            raise RuntimeError("Must provide either req and/or key")

        start = time.time()
        now = time.strftime('%Y%m%d%H%M%S', time.localtime(start))
        end = time.strftime('%Y%m%d%H%M%S', time.localtime(start + age))
        self.set_notBefore(now)
        self.set_notAfter(end)

        self.set_serial_number(_generate_serial())

        if ca:
            self.add_extensions([
                crypto.X509Extension('basicConstraints', 1, 'CA:true'),
            ])
        else:
            self.add_extensions([
                crypto.X509Extension('basicConstraints', 1, 'CA:false'),
                crypto.X509Extension('keyUsage', 0,
                    'nonRepudiation,digitalSignature,keyEncipherment'),
                crypto.X509Extension('extendedKeyUsage', 0,
                    'codeSigning,serverAuth,clientAuth'),
                # crypto.X509Extension('subjectKeyIdentifier', 0, 'hash'),
                crypto.X509Extension('nsComment', 0, 'Generated by CAcurity'),
            ])

        if req:
            self.set_subject(req.get_subject())
            self.set_pubkey(req.get_pubkey())

        subj = self.get_subject()
        for k, v in subject.items():
            setattr(subj, k, v)

        if key:
            self.set_pubkey(key)
            self.sign(key, 'sha256')

    def issued_by(self, issuer_cert, issuer_key):
        """Given a CA certificate and its key, sign this certificate and update
        the issuer of this cert with the CA's subject."""
        self.set_issuer(issuer_cert.get_subject())
        self.sign(issuer_key, 'sha256')
        # self.add_extensions([
        #     crypto.X509Extension('authorityKeyIdentifier', 0,
        #         'keyid,issuer:always'),
        # ])

    @classmethod
    def load(cls, data):
        """Loads a certificate from a string.

        @rtype: Certificate
        """
        try:
            cert = crypto.load_certificate(crypto.FILETYPE_PEM, data)
        except crypto.Error as ex:
            if 'no start line' in ex.args[0][0]:
                raise NoStartLine()
            raise

        cert.__class__ = cls
        return cert

    def to_pem(self):
        """@rtype: str"""
        return crypto.dump_certificate(crypto.FILETYPE_PEM, self)

    def to_text(self):
        """@rtype: str"""
        return crypto.dump_certificate(crypto.FILETYPE_TEXT, self)


def _generate_serial():
    """Generates a random 159-bit (20 byte) integer"""
    serial = 0
    for _ in range(20):
        serial <<= 8
        serial += random.randint(0, 255)
    return serial
